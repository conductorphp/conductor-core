<?php

namespace DevopsToolCore\Database\Command;

use DevopsToolCore\Database\DatabaseImportAdapterManager;
use DevopsToolCore\Database\DatabaseImportAdapterInterface;
use DevopsToolCore\Exception;
use DevopsToolCore\MonologConsoleHandlerAwareTrait;
use Psr\Log\LoggerInterface;
use Psr\Log\NullLogger;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

class DatabaseImportCommand extends Command
{
    use MonologConsoleHandlerAwareTrait;

    /**
     * @var DatabaseImportAdapterInterface
     */
    private $databaseImportAdapter;
    /**
     * @var DatabaseImportAdapterManager
     */
    private $databaseImportAdapterFactory;
    /**
     * @var LoggerInterface
     */
    private $logger;

    /**
     * DatabaseImportCommand constructor.
     *
     * @param DatabaseImportAdapterManager $databaseImportAdapterFactory
     * @param LoggerInterface|null         $logger
     * @param string|null                  $name
     */
    public function __construct(
        DatabaseImportAdapterManager $databaseImportAdapterFactory,
        LoggerInterface $logger = null,
        string $name = null
    ) {
        $this->databaseImportAdapterFactory = $databaseImportAdapterFactory;
        if (is_null($logger)) {
            $logger = new NullLogger();
        }
        $this->logger = $logger;
        parent::__construct($name);
    }

    /**
     * @return void
     */
    protected function configure()
    {
        $supportedFormats = $this->databaseImportAdapterFactory->getSupportedFormats();
        $this->setName('database:import')
            ->addArgument(
                'format',
                InputArgument::REQUIRED,
                "Format to import from.\nSupported formats: <comment>" . implode(', ', $supportedFormats) . '</comment>'
            )
            ->addArgument(
                'filename',
                InputArgument::REQUIRED,
                'Filename to import from.'
            )
            ->addArgument('database', InputArgument::REQUIRED, 'Database to export.')
            ->addOption(
                'connection',
                null,
                InputOption::VALUE_OPTIONAL,
                'Database connection configuration to use.',
                'default'
            )
            ->setDescription('Import a file generated by devops database:export into a database.')
            ->setHelp(
                "This command imports a file generated by devops database:export into a database."
            );
    }

    /**
     * @param InputInterface  $input
     * @param OutputInterface $output
     *
     * @return int
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $this->injectOutputIntoLogger($output, $this->logger);
        $this->databaseImportAdapter = $this->databaseImportAdapterFactory->getAdapter($input->getArgument('format'));
        $this->databaseImportAdapter->setLogger($this->logger);
        $this->databaseImportAdapter->selectConnection($input->getOption('connection'));

        $database = $input->getArgument('database');
        $filename = $input->getArgument('filename');

        $this->logger->info("Importing \"$filename\" into database \"$database\"...");
        $this->databaseImportAdapter->importFromFile(
            $filename,
            $database,
            [] // This command does not yet support any options
        );
        $this->logger->info("\"$filename\" imported into database \"$database\".");
        return 0;
    }

}
