<?php

namespace DevopsToolCore\Database\Command;

use App\Exception\DomainException;
use DevopsToolCore\MonologConsoleHandler;
use DevopsToolCore\ShellCommandHelper;
use DevopsToolCore\Database\ImportExportAdapter\DatabaseImportExportAdapterInterface;
use DevopsToolCore\Database\ImportExportAdapter\MydumperDatabaseAdapter;
use DevopsToolCore\Database\ImportExportAdapter\MysqldumpDatabaseAdapter;
use DevopsToolCore\Database\ImportExportAdapter\MysqlTabDelimitedDatabaseAdapter;
use Monolog\Logger;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

class DatabaseImportCommand extends Command
{
    protected function configure()
    {
        $this->setName('database:import')
            ->addArgument('database', InputArgument::REQUIRED, 'Database to import into.')
            ->addArgument('filename', InputArgument::REQUIRED, 'File to import')
            ->addOption(
                'format',
                null,
                InputOption::VALUE_REQUIRED,
                sprintf(
                    'Format to export in. Must be "%s" or "%s".',
                    DatabaseImportExportAdapterInterface::FORMAT_MYDUMPER,
                    DatabaseImportExportAdapterInterface::FORMAT_SQL,
                    DatabaseImportExportAdapterInterface::FORMAT_TAB_DELIMITED
                ),
                DatabaseImportExportAdapterInterface::FORMAT_SQL
            )
            ->setDescription('Import a sql or tab delimited file generated by devops database:export into a database.')
            ->setHelp(
                "This command imports a sql or tab delimited file generated by devops database:export into a database."
            );
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        error_reporting(-1);
        $output->writeln(
            [
                'Database: Import',
                '============',
                '',
            ]
        );

        $database = $input->getArgument('database');
        $filename = $input->getArgument('filename');
        $format = $input->getOption('format');

        $logger = $this->getLogger($output);
        $shellCommandHelper = new ShellCommandHelper($logger);

        switch ($format) {
            case DatabaseImportExportAdapterInterface::FORMAT_TAB_DELIMITED:
                $adapter = new MysqlTabDelimitedDatabaseAdapter(null, $shellCommandHelper, $logger);
                break;
            case DatabaseImportExportAdapterInterface::FORMAT_SQL:
                $adapter = new MysqldumpDatabaseAdapter(null, $shellCommandHelper, $logger);
                break;
            case DatabaseImportExportAdapterInterface::FORMAT_MYDUMPER:
                $adapter = new MydumperDatabaseAdapter(null, $shellCommandHelper, $logger);
                break;

            default:
                throw new DomainException(
                    sprintf(
                        'Invalid format "%s" specified.',
                        $format
                    )
                );
        }

        $output->writeln("Importing \"$filename\" into database \"$database\"...");
        $adapter->importFromFile(
            $database,
            $filename,
            $format
        );
        $output->writeln("\"$filename\" imported into database \"$database\".");
        return 0;
    }

    /**
     * @param OutputInterface $output
     *
     * @return Logger
     */
    protected function getLogger(OutputInterface $output)
    {
        $logger = new Logger('database:import');
        $logger->pushHandler(new MonologConsoleHandler($output));
        return $logger;
    }
}
