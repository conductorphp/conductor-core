<?php

namespace ConductorCore\Console\Database;

use ConductorCore\Database\DatabaseImportExportAdapterManager;
use ConductorCore\MonologConsoleHandlerAwareTrait;
use Psr\Log\LoggerInterface;
use Psr\Log\NullLogger;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

class DatabaseImportCommand extends Command
{
    use MonologConsoleHandlerAwareTrait;

    /**
     * @var DatabaseImportExportAdapterManager
     */
    private $databaseImportExportAdapterManager;
    /**
     * @var LoggerInterface
     */
    private $logger;

    /**
     * DatabaseImportCommand constructor.
     *
     * @param DatabaseImportExportAdapterManager $databaseImportAdapterFactory
     * @param LoggerInterface|null               $logger
     * @param string|null                        $name
     */
    public function __construct(
        DatabaseImportExportAdapterManager $databaseImportImportExportAdapterManager,
        LoggerInterface $logger = null,
        string $name = null
    ) {
        $this->databaseImportExportAdapterManager = $databaseImportImportExportAdapterManager;
        if (is_null($logger)) {
            $logger = new NullLogger();
        }
        $this->logger = $logger;
        parent::__construct($name);
    }

    /**
     * @return void
     */
    protected function configure()
    {
        $adapterNames = $this->databaseImportExportAdapterManager->getAdapterNames();
        $this->setName('database:import')
            ->addArgument(
                'filename',
                InputArgument::REQUIRED,
                'Filename to import from.'
            )
            ->addArgument('database', InputArgument::REQUIRED, 'Database to import into.')
            ->addOption(
                'adapter',
                null,
                InputOption::VALUE_OPTIONAL,
                'Database import/export adapter configuration to use. Configured adapters: <comment>' . implode(
                    ', ',
                    $adapterNames
                ) . '</comment>',
                'default'
            )
            ->setDescription('Import a file generated by conductor database:export into a database.')
            ->setHelp(
                "This command imports a file generated by conductor database:export into a database."
            );
    }

    /**
     * @param InputInterface $input
     * @param OutputInterface $output
     *
     * @return int
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $this->injectOutputIntoLogger($output, $this->logger);
        $adapter = $this->databaseImportExportAdapterManager->getAdapter($input->getOption('adapter'));
        $adapter->setLogger($this->logger);

        $database = $input->getArgument('database');
        $filename = $input->getArgument('filename');

        $this->logger->info("Importing \"$filename\" into database \"$database\".");
        $adapter->importFromFile(
            $filename,
            $database,
            [] // This command does not yet support any options
        );
        $this->logger->info("\"$filename\" imported into database \"$database\".");
        return 0;
    }

}
